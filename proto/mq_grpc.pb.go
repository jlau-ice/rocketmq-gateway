// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/mq.proto

package mqproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RocketMQGateway_SendMessage_FullMethodName = "/mq.RocketMQGateway/SendMessage"
	RocketMQGateway_Subscribe_FullMethodName   = "/mq.RocketMQGateway/Subscribe"
)

// RocketMQGatewayClient is the client API for RocketMQGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ====================================================================
// 核心服务定义：RocketMQGateway (Simple)
// ====================================================================
type RocketMQGatewayClient interface {
	// 1. 发送消息：同步发送
	SendMessage(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	// 2. 消费消息：客户端发起订阅，服务端持续推送消息流
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageResponse], error)
}

type rocketMQGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewRocketMQGatewayClient(cc grpc.ClientConnInterface) RocketMQGatewayClient {
	return &rocketMQGatewayClient{cc}
}

func (c *rocketMQGatewayClient) SendMessage(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, RocketMQGateway_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketMQGatewayClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RocketMQGateway_ServiceDesc.Streams[0], RocketMQGateway_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, MessageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RocketMQGateway_SubscribeClient = grpc.ServerStreamingClient[MessageResponse]

// RocketMQGatewayServer is the server API for RocketMQGateway service.
// All implementations must embed UnimplementedRocketMQGatewayServer
// for forward compatibility.
//
// ====================================================================
// 核心服务定义：RocketMQGateway (Simple)
// ====================================================================
type RocketMQGatewayServer interface {
	// 1. 发送消息：同步发送
	SendMessage(context.Context, *SendRequest) (*SendResponse, error)
	// 2. 消费消息：客户端发起订阅，服务端持续推送消息流
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[MessageResponse]) error
	mustEmbedUnimplementedRocketMQGatewayServer()
}

// UnimplementedRocketMQGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRocketMQGatewayServer struct{}

func (UnimplementedRocketMQGatewayServer) SendMessage(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedRocketMQGatewayServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[MessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedRocketMQGatewayServer) mustEmbedUnimplementedRocketMQGatewayServer() {}
func (UnimplementedRocketMQGatewayServer) testEmbeddedByValue()                         {}

// UnsafeRocketMQGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RocketMQGatewayServer will
// result in compilation errors.
type UnsafeRocketMQGatewayServer interface {
	mustEmbedUnimplementedRocketMQGatewayServer()
}

func RegisterRocketMQGatewayServer(s grpc.ServiceRegistrar, srv RocketMQGatewayServer) {
	// If the following call pancis, it indicates UnimplementedRocketMQGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RocketMQGateway_ServiceDesc, srv)
}

func _RocketMQGateway_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketMQGatewayServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketMQGateway_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketMQGatewayServer).SendMessage(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketMQGateway_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RocketMQGatewayServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, MessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RocketMQGateway_SubscribeServer = grpc.ServerStreamingServer[MessageResponse]

// RocketMQGateway_ServiceDesc is the grpc.ServiceDesc for RocketMQGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RocketMQGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mq.RocketMQGateway",
	HandlerType: (*RocketMQGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _RocketMQGateway_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _RocketMQGateway_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/mq.proto",
}
